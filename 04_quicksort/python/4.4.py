# Бинарный поиск с рекурсией

# Базовым случаем для бинарного поиска является массив, содержащий всего один элемент.
# Если искомый элемент совпадает с элементом массива - вы нашли его. В противном случае элемент в массиве отсутствует.
# В рекурсивном случае для бинарного поиска массив делится пополам, одна половина отбрасывается,
# а для другой половины производится бинарный поиск.

def binary_search(arr, target):                        # Oбъявление функции binary_search с двумя аргументами: arr (vfccbd, в котором производится поиск) и target (целевой элемент, который нужно найти)
    if not arr:                                        
        return -1                                      # Если arr пуст, то функция возвращает -1, что означает, что целевой элемент не найден в списке

    low = 0                                            # Устанавливаем начальное значение нижней границы поиска
    high = len(arr) - 1                                # Устанавливаем начальное значение верхней границы поиска
    mid = (low + high) // 2                            # Вычисляем индекс среднего элемента списка

    if arr[mid] == target:                             # Если средний элемент списка равен целевому элементу, то возвращаем целевой элемент
        return target
    elif arr[mid] > target:                            # Если средний элемент списка БОЛЬШЕ целевого элемента, то рекурсивно вызываем binary_search для левой половины списка
        return binary_search(arr[:mid], target)
    else:
        return binary_search(arr[mid+1:], target)      # Если средний элемент списка МЕНЬШЕ целевого элемента, то рекурсивно вызываем binary_search для правой половины списка


print(binary_search([6, 7, 8, 9, 10], 4))
print(binary_search([6, 7, 8, 9, 10], 6))

# -1
# 6