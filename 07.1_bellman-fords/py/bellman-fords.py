# https://www.youtube.com/watch?v=Ttezuzs39nk

# граф
class Graph:
    def __init__(self, vertices):
        self.V = vertices             # Количество вершин
        self.graph = []               # Список по умолчанию для хранения графа

    # функция для добавления ребра в граф
    def addEdge(self, u, v, w):
        self.graph.append([u, v, w])

    # вспомогательная функция для вывода решения
    # чисто для форматирования в консольке
    def printArr(self, dist):
        print("Вершина Расстояние от родителя")
        for i in range(self.V):
            print("% d \t\t % d" % (i, dist[i])) 

    # Основная функция, которая находит кратчайшие расстояния от src до
    # всех остальных вершин с использованием алгоритма Беллмана-Форда. Функция
    # также обнаруживает циклы с отрицательным весом
    def BellmanFord(self, src):

        # Шаг 1: Инициализация расстояний от src до всех остальных вершин
        # как БЕСКОНЕЧНОСТЬ
        dist = [float("inf")] * self.V
        dist[src] = 0

        # Шаг 2: Расслабление всех ребер |V| - 1 раз. Простой кратчайший путь от src до
        # любой другой вершины может иметь максимум |V| - 1 ребер
        # В контексте алгоритма Беллмана-Форда, расслабление ребра (u, v) с весом w означает проверку, 
        # можно ли уменьшить расстояние до вершины v через вершину u. Если это возможно, то расстояние до вершины v обновляется.
        for i in range(self.V - 1):
            # Обновление значения dist и индекса родителя смежных вершин выбранной вершины. 
            # Рассматриваются только те вершины, которые все еще в очереди
            for u, v, w in self.graph:
                if dist[u] != float("inf") and dist[u] + w < dist[v]:
                    dist[v] = dist[u] + w

        # Шаг 3: проверка на циклы с отрицательным весом. Предыдущий шаг гарантирует кратчайшие расстояния, 
        # если граф не содержит цикл с отрицательным весом. Если мы получаем более короткий путь, то есть цикл.
        for u, v, w in self.graph:
            if dist[u] != float("inf") and dist[u] + w < dist[v]:
                print("Граф содержит цикл с отрицательным весом")
                return

        # вывод всех расстояний
        self.printArr(dist)

g = Graph(5)
g.addEdge(0, 1, -1)
g.addEdge(0, 2, 4)
g.addEdge(1, 2, 3)
g.addEdge(1, 3, 2)
g.addEdge(1, 4, 2)
g.addEdge(3, 2, 5)
g.addEdge(3, 1, 1)
g.addEdge(4, 3, -3)

g.BellmanFord(0)
