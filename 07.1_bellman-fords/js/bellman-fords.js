// граф
class Graph {
    constructor(vertices) {
        this.V = vertices;     // Количество вершин
        this.graph = [];       // Массив для хранения графа
    }

    // Функция для добавления ребра в граф
    addEdge(u, v, w) {
        this.graph.push([u, v, w]);
    }

    // вспомогательная функция для вывода решения
    // чисто для форматирования в консольке
    printArr(dist) {
        console.log("Вершина Расстояние от источника");
        for (let i = 0; i < this.V; i++) {
            console.log(`${i} \t\t ${dist[i]}`);
        }
    }

    // Основная функция, которая находит кратчайшие расстояния от src до
    // всех остальных вершин с использованием алгоритма Беллмана-Форда. Функция
    // также обнаруживает циклы с отрицательным весом
    BellmanFord(src) {
        // Шаг 1: Инициализация расстояний от src до всех остальных вершин
        // как БЕСКОНЕЧНОСТЬ
        let dist = new Array(this.V).fill(Infinity);
        dist[src] = 0;

        // Шаг 2: Расслабление всех ребер |V| - 1 раз. Простой кратчайший путь от src до
        // любой другой вершины может иметь максимум |V| - 1 ребер
        // В контексте алгоритма Беллмана-Форда, расслабление ребра (u, v) с весом w означает проверку, 
        // можно ли уменьшить расстояние до вершины v через вершину u. Если это возможно, то расстояние до вершины v обновляется.
        
        for (let i = 0; i < this.V - 1; i++) {
            // Обновление значения dist и индекса родителя смежных вершин выбранной вершины. 
            // Рассматриваются только те вершины, которые все еще в очереди
            for (let [u, v, w] of this.graph) {
                if (dist[u] !== Infinity && dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                }
            }
        }

        // Шаг 3: проверка на циклы с отрицательным весом. Предыдущий шаг гарантирует кратчайшие расстояния, 
        // если граф не содержит цикл с отрицательным весом. Если мы получаем более короткий путь, то есть цикл.
        for (let [u, v, w] of this.graph) {
            if (dist[u] !== Infinity && dist[u] + w < dist[v]) {
                console.log("Граф содержит цикл с отрицательным весом");
                return;
            }
        }

        // Вывод всех расстояний
        this.printArr(dist);
    }
}

// Пример использования
let g = new Graph(5);
g.addEdge(0, 1, -1);
g.addEdge(0, 2, 4);
g.addEdge(1, 2, 3);
g.addEdge(1, 3, 2);
g.addEdge(1, 4, 2);
g.addEdge(3, 2, 5);
g.addEdge(3, 1, 1);
g.addEdge(4, 3, -3);

g.BellmanFord(0);
